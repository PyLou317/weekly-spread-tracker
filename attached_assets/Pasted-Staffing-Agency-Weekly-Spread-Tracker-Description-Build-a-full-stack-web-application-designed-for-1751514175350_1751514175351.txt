Staffing Agency Weekly Spread Tracker

Description:

Build a full-stack web application designed for staffing agency users to efficiently track the weekly revenue (spread) generated by placed candidates. The application will feature robust user authentication, allowing secure access to individual user data.

Core Functionality:

User Authentication: Implement a secure user login, registration, and account management system using Django Allauth. This includes features like email verification, password reset, and potentially social logins if desired in the future.

Weekly Spread Tracking:

For each placed candidate, track:

Candidate Name

Client Name (the business name where the candidate is placed)

Contract Start Date

Contract End Date

Weekly Spread Amount (revenue generated by employee hired and placed at client site)

Recruiter/Account Manager: The name of the recruiter or account manager who "owns" or is responsible for this candidate.

Candidate Management:

Ability to add new candidate placements.

Ability to edit existing candidate details (all fields).

Weekly Report Processing:

Users can upload a weekly spread report (e.g., CSV or Excel) containing updates on current contractors.

Reference: A sample spread report will be provided separately for structural guidance.

The application will process this report to identify changes:

Adding New Contractors: Automatically add new contractors found in the report to the database.

Managing Departed Contractors: Instead of immediately removing contractors not present in the new report, move them to a separate "For Review" list or section. This allows for manual verification before final removal.

Dashboard: The main landing page after login should be a comprehensive dashboard including:

Contractor and Client Overview:

Total count of active contractors.

Total number of unique clients (business names).

Breakdown: How many contractors are currently at each client.

Financial Overview:

Total current weekly spread.

Total weekly spread falling off this quarter (based on contract end dates).

Total guaranteed weekly spread for the next quarter (Total current spread minus fall-offs from this quarter).

Contract End Date Notifications:

Quarterly Warning (Yellow): Display a yellow warning for contracts that have an end date within the current calendar quarter (even if it's more than two weeks away).

Imminent Warning (Red): This yellow warning should escalate to a red warning when the contract end date is two weeks or less away.

Past End Date Notification: Provide a prominent notification for contracts that have already passed their end date, prompting the user to extend the end date.

Technical Stack:

Backend: Django (Python)

Utilize Django's ORM for database interactions.

Implement separate Django apps for logical separation of features (e.g., accounts for authentication, candidates for candidate management, reports for report processing, dashboard for metrics).

Authentication: Django Allauth

Frontend:

HTML5 for structure.

CSS3 for styling.

JavaScript (if needed) for interactive elements (e.g., dynamic form updates, client-side validation).

Bootstrap 5 for responsive design and UI components.

Design Requirements:

Aesthetic: Minimal and modern.

Color Palette: Subtle yet vibrant. Aim for a professional look with pops of color (specifically yellow and red for warnings) to highlight important information and critical alerts.

User Experience: Intuitive navigation, clean layouts, and clear display of information. The dashboard should be easy to read and provide actionable insights at a glance.

Database:

Use Django's default SQLite for development, but structure models to be easily adaptable to PostgreSQL or other production databases.

Key Steps & Considerations for Development:

Project Setup: Initialize a Django project and create initial apps.

Django Allauth Integration: Follow the Django Allauth documentation to correctly set up and configure authentication, including custom user models if necessary.

Database Models: Design Django models for User (leveraging Allauth's user model), Candidate (including client_name, contract_start_date, contract_end_date, weekly_spread_amount, and recruiter_or_account_manager), and potentially a SpreadReport or ReviewQueue to represent the data effectively.

CRUD Operations for Candidates: Develop views, URLs, and templates for creating, reading, updating, and deleting candidate records, ensuring all specified fields are included in forms and displays.

File Upload Handling: Implement a mechanism for users to upload their weekly spread reports.

Report Parsing Logic: Write Python code to parse the uploaded report (e.g., using pandas for CSV/Excel) and compare it against existing database records, accounting for all relevant fields if they appear in the report.

Review Queue: Implement the logic to move contractors to a "For Review" state and provide an interface for managing them.

Dashboard Logic:

Write Django views and template tags/filters to calculate all the required metrics (total contractors, unique clients, contractors per client, total spread, quarterly fall-offs, next quarter's guaranteed spread).

Implement the logic to identify contracts ending within the current quarter (yellow warning), contracts ending within two weeks (red warning), and contracts past their end date. This will require checking against the current date.

Frontend Integration: Integrate Bootstrap 5 for styling and ensure a responsive design across different devices. Utilize Bootstrap's alert or badge components, applying specific classes for yellow (warning) and red (danger) alerts based on the backend logic.

Error Handling & Validation: Implement robust error handling and input validation on both the frontend and backend.

Deliverables:

A fully functional web application deployed on Replit.

Clean, well-commented code.

A README.md file explaining how to set up and run the project, and outlining the key features and design choices.

